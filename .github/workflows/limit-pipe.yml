name: Limit pipeline on PR approval

on:
  workflow_dispatch:

jobs:
  lets_go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # - name: Generate token
      #   id: generate_token
      #   uses: tibdex/github-app-token@v1
      #   with:
      #     app_id: ${{ secrets.APP_ID }}
      #     private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Check for Open PR to Main
        id: pr-check
        uses: actions/github-script@v7
        with:
          script: |
            // Skip check if triggered on main branch
            if (context.ref === 'refs/heads/main') {
              console.log("Triggered on the main branch. Skipping PR approval check.");
              return { pr_exists: true, pr_approved: true };
            }

            const response = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: context.repo.owner + ':' + context.ref.replace('refs/heads/', '')
            });
            
            const pr = response.data.find(pr => pr.base.ref === 'main');
            if (!pr || pr.state !== 'open') {
              core.setFailed("No open PR found for this branch to 'main'. Exiting.");
              return;
            }
            
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
            });
            
            // Filter for approved reviews and make sure there is at least one
            const approvals = reviews.data.filter(review => review.state === 'APPROVED');
            if (approvals.length === 0) {
              core.setFailed("The PR is not approved. At least one approval is required.");
              return;
            }
            
            return { pr_exists: true, pr_approved: true };
          result-encoding: string

      # - name: Wait for approval
      #   uses: trstringer/manual-approval@v1
      #   with:
      #     secret: ${{ steps.generate_token.outputs.token }}
      #     approvers: myteam
      #     minimum-approvals: 1

      - name: Test
        run: |
          echo "Running pipeline...."
